// Targeted by JavaCPP version 1.3.1: DO NOT EDIT THIS FILE

package com.github.jstarspace;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

public class StarSpaceWrapper extends com.github.jstarspace.config.StarSpaceWrapper {
    static { Loader.load(); }

@Name("std::vector<std::string>") public static class StringVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public StringVector(Pointer p) { super(p); }
    public StringVector(BytePointer ... array) { this(array.length); put(array); }
    public StringVector(String ... array) { this(array.length); put(array); }
    public StringVector()       { allocate();  }
    public StringVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef StringVector put(@ByRef StringVector x);

    public native long size();
    public native void resize(@Cast("size_t") long n);

    @Index public native @StdString BytePointer get(@Cast("size_t") long i);
    public native StringVector put(@Cast("size_t") long i, BytePointer value);
    @ValueSetter @Index public native StringVector put(@Cast("size_t") long i, @StdString String value);

    public StringVector put(BytePointer ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }

    public StringVector put(String ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

// Parsed from starspace_wrapper.h

// #ifndef STARSPACE_WRAPPER_H
// #define STARSPACE_WRAPPER_H

// #include "StarSpace/src/starspace.h"
// #include "starspace_wrapper_misc.h"

    @Namespace("StarSpaceWrapper") @NoOffset public static class StarSpaceApi extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public StarSpaceApi(Pointer p) { super(p); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public StarSpaceApi(long size) { super((Pointer)null); allocateArray(size); }
        private native void allocateArray(long size);
        @Override public StarSpaceApi position(long position) {
            return (StarSpaceApi)super.position(position);
        }
    
        public StarSpaceApi() { super((Pointer)null); allocate(); }
        private native void allocate();
        public native void runCmd(int arg0, @Cast("char**") PointerPointer arg1);
        public native void runCmd(int arg0, @Cast("char**") @ByPtrPtr BytePointer arg1);
        public native void runCmd(int arg0, @Cast("char**") @ByPtrPtr ByteBuffer arg1);
        public native void runCmd(int arg0, @Cast("char**") @ByPtrPtr byte[] arg1);
    }


// #endif


// Parsed from starspace_wrapper_javacpp.h

// Added <numeric> since VS 14.0 complains about missing std::iota
// #include <numeric>
// #include "StarSpace/src/starspace.cpp"

// #include "starspace_wrapper.cc"


}
